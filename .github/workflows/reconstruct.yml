name: Reconstruct 3D (robust, no-fail UX)

on:
  push:
    paths:
      - 'uploads/**'

jobs:
  odm:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect item id (robust)
        id: detect
        shell: bash
        run: |
          set -e
          ID=$(git diff-tree --no-commit-id --name-only -r "$GITHUB_SHA" | grep '^uploads/' | head -n1 | cut -d'/' -f2 || true)
          if [ -z "$ID" ]; then
            ID=$(git show --name-only --pretty="" "$GITHUB_SHA" | grep '^uploads/' | head -n1 | cut -d'/' -f2 || true)
          fi
          if [ -z "$ID" ] && [ -d uploads ]; then
            ID=$(ls -1 uploads | head -n1 || true)
          fi
          echo "id=$ID" >> "$GITHUB_OUTPUT"
          test -n "$ID"

      - name: Init progress (0%)
        shell: bash
        run: |
          set -e
          ID=${{ steps.detect.outputs.id }}
          mkdir -p "items/$ID"
          echo '{"phase":"queued","percent":0,"msg":"In coda"}' > "items/$ID/status.json"
          git config user.name "gh-actions"
          git config user.email "actions@github.com"
          git add "items/$ID/status.json"
          git pull --rebase || true
          git commit -m "[skip ci] status $ID 0%" || true
          git push || (git pull --rebase && git push) || true

      - name: Install ffmpeg (optional)
        shell: bash
        run: |
          set -e
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Prepare images & validate thresholds (10%)
        id: prepare
        shell: bash
        run: |
          set -e
          shopt -s nullglob nocaseglob
          ID=${{ steps.detect.outputs.id }}
          export ID

          MIN_REQUIRED=20
          MIN_RECOMMENDED=40

          mkdir -p "work/$ID/images" "work/$ID/tmpconv"

          # Prendi TUTTE le immagini (jpg/jpeg/png) ricorsivamente
          while IFS= read -r -d '' f; do
            cp "$f" "work/$ID/tmpconv/"
          done < <(find "uploads/$ID" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \) -print0)

          # Conversione/normalizzazione a JPG max lato 4096
          python - <<'PY'
          import os
          from PIL import Image
          id = os.environ["ID"]
          base = f"work/{id}/tmpconv"
          out  = f"work/{id}/images"
          os.makedirs(out, exist_ok=True)
          def clamp(im, max_side=4096):
            w,h = im.size
            m = max(w,h)
            if m <= max_side: return im
            s = max_side/m
            return im.resize((int(w*s), int(h*s)), Image.LANCZOS)
          i=0
          for fn in sorted(os.listdir(base)):
            src=os.path.join(base,fn)
            if not os.path.isfile(src): continue
            ext=os.path.splitext(fn)[1].lower()
            try:
              if ext in (".jpg",".jpeg",".png"):
                im=Image.open(src).convert("RGB")
                im=clamp(im)
                i+=1
                im.save(os.path.join(out,f"img_{i:06d}.jpg"),"JPEG",quality=92,optimize=True)
            except Exception:
              pass
          PY

          COUNT=$(ls -1 "work/$ID/images/"*.jpg 2>/dev/null | wc -l | tr -d ' ')

          # Messaggi UX
          if [ "${COUNT:-0}" -lt "$MIN_REQUIRED" ]; then
            MSG="Trovate solo ${COUNT:-0} foto. Minimo richiesto: $MIN_REQUIRED. Aggiungi altre immagini e ricarica."
            PHASE="blocked"
            PERCENT=9
            PROCEED=no
          elif [ "${COUNT:-0}" -lt "$MIN_RECOMMENDED" ]; then
            MSG="Trovate $COUNT foto. È consigliato caricarne almeno $MIN_RECOMMENDED per una ricostruzione più robusta. Procedo comunque."
            PHASE="prepare"
            PERCENT=10
            PROCEED=yes
          else
            MSG="Preparo immagini… ($COUNT foto)"
            PHASE="prepare"
            PERCENT=10
            PROCEED=yes
          fi

          # Aggiorna status.json (mai fallire la run)
          python - <<'PY'
          import json, os
          id  = os.environ["ID"]
          msg = os.environ["MSG"]
          phase = os.environ["PHASE"]
          pct = int(os.environ["PERCENT"])
          p = f"items/{id}/status.json"
          open(p,"w").write(json.dumps({"phase":phase,"percent":pct,"msg":msg}))
          PY

          git add "items/$ID/status.json"
          git pull --rebase || true
          git commit -m "[skip ci] status $ID $PERCENT%" || true
          git push || (git pull --rebase && git push) || true

          echo "proceed=$PROCEED" >> "$GITHUB_OUTPUT"
          echo "count=${COUNT:-0}" >> "$GITHUB_OUTPUT"

      - name: Run ODM (65%)
        if: steps.prepare.outputs.proceed == 'yes'
        shell: bash
        run: |
          set -e
          ID=${{ steps.detect.outputs.id }}
          export ID

          docker run --rm -v "$PWD/work/$ID":/datasets/code opendronemap/odm:latest \
            --project-path /datasets \
            --fast-orthophoto \
            --texturing-nadir-weight 16 \
            --optimize-disk-space || true

          python - <<'PY'
          import json, os
          id = os.environ["ID"]
          p = f"items/{id}/status.json"
          open(p,"w").write(json.dumps({"phase":"mvs","percent":65,"msg":"Densificazione e mesh…"}))
          PY

          git add "items/$ID/status.json"
          git pull --rebase || true
          git commit -m "[skip ci] status $ID 65%" || true
          git push || (git pull --rebase && git push) || true

      - name: Setup Python
        if: steps.prepare.outputs.proceed == 'yes'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python deps
        if: steps.prepare.outputs.proceed == 'yes'
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install trimesh pygltflib pillow

      - name: Convert OBJ to GLB (85%)
        if: steps.prepare.outputs.proceed == 'yes'
        shell: bash
        run: |
          set -e
          ID=${{ steps.detect.outputs.id }}
          export ID
          mkdir -p "items/$ID"

          if [ -f "work/$ID/code/odm_texturing/odm_textured_model.obj" ]; then
            python scripts/prepare_glb.py "work/$ID/code/odm_texturing/odm_textured_model.obj" "items/$ID/model.glb" || true
            cp items_template/index.html "items/$ID/index.html" || true

            python - <<'PY'
            import json, os
            id = os.environ["ID"]
            p = f"items/{id}/status.json"
            open(p,"w").write(json.dumps({"phase":"convert","percent":85,"msg":"Conversione GLB…"}))
            PY

            git add "items/$ID/status.json" "items/$ID/index.html" "items/$ID/model.glb" || true
            git pull --rebase || true
            git commit -m "[skip ci] status $ID 85% + files" || true
            git push || (git pull --rebase && git push) || true
          else
            python - <<'PY'
            import json, os
            id = os.environ["ID"]
            p = f"items/{id}/status.json"
            open(p,"w").write(json.dumps({"phase":"error","percent":70,"msg":"Ricostruzione fallita. Aumenta il numero di foto e riprova (consigliate 40+)."}))
            PY
            git add "items/$ID/status.json"
            git pull --rebase || true
            git commit -m "[skip ci] status $ID error: no OBJ" || true
            git push || (git pull --rebase && git push) || true

      - name: Mark ready (100%)
        if: steps.prepare.outputs.proceed == 'yes'
        shell: bash
        run: |
          set -e
          ID=${{ steps.detect.outputs.id }}
          export ID

          if [ -f "items/$ID/model.glb" ]; then
            if [ -f data/index.json ]; then
              python - <<'PY'
              import json, os
              id = os.environ["ID"]
              p = "data/index.json"
              j = json.load(open(p))
              for it in j:
                if it.get("id") == id:
                    it["status"] = "ready"
              open(p, "w").write(json.dumps(j, indent=2))
              open(f"items/{id}/status.json", "w").write(json.dumps({"phase":"ready","percent":100,"msg":"Pronto"}))
              PY

              git add "data/index.json" "items/$ID/status.json"
              git pull --rebase || true
              git commit -m "[skip ci] status $ID 100%" || true
              git push || (git pull --rebase && git push) || true
            fi
          fi
