name: Reconstruct 3D (robust)

on:
  push:
    paths:
      - 'uploads/**'

jobs:
  odm:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect item id (robust)
        id: detect
        shell: bash
        run: |
          set -e
          # 1) file modificati in questo commit
          ID=$(git diff-tree --no-commit-id --name-only -r "$GITHUB_SHA" | grep '^uploads/' | head -n1 | cut -d'/' -f2 || true)
          # 2) fallback: lista da git show
          if [ -z "$ID" ]; then
            ID=$(git show --name-only --pretty="" "$GITHUB_SHA" | grep '^uploads/' | head -n1 | cut -d'/' -f2 || true)
          fi
          # 3) fallback: prima cartella presente in uploads
          if [ -z "$ID" ] && [ -d uploads ]; then
            ID=$(ls -1 uploads | head -n1 || true)
          fi
          echo "id=$ID" >> "$GITHUB_OUTPUT"
          test -n "$ID"

      - name: Init progress (0%)
        shell: bash
        run: |
          set -e
          ID=${{ steps.detect.outputs.id }}
          mkdir -p "items/$ID"
          echo '{"phase":"queued","percent":0,"msg":"In coda"}' > "items/$ID/status.json"
          git config user.name "gh-actions"
          git config user.email "actions@github.com"
          git add "items/$ID/status.json"
          git commit -m "[skip ci] status $ID 0%" || true
          git push || true

      - name: Install ffmpeg
        shell: bash
        run: |
          set -e
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Prepare images (10%)
        shell: bash
        run: |
          set -e
          ID=${{ steps.detect.outputs.id }}
          export ID
          mkdir -p "work/$ID/images"

          # Copia JPG già presenti
          if ls "uploads/$ID/images/"*.jpg >/dev/null 2>&1; then
            cp -R "uploads/$ID/images/"*.jpg "work/$ID/images/"
          fi
          if ls "uploads/$ID/"*.jpg >/dev/null 2>&1; then
            cp -R "uploads/$ID/"*.jpg "work/$ID/images/"
          fi

          # Estrai frame dai video (3 fps, max lato 2048px)
          if ls "uploads/$ID/videos/"*.* >/dev/null 2>&1; then
            for V in "uploads/$ID/videos/"*.*; do
              ffmpeg -i "$V" -vf "fps=3,scale='min(2048,iw)':'-2'" "work/$ID/images/v_%06d.jpg"
            done
          fi
          if ls "uploads/$ID"/video.* >/dev/null 2>&1; then
            V=$(ls "uploads/$ID"/video.* | head -n1)
            ffmpeg -i "$V" -vf "fps=3,scale='min(2048,iw)':'-2'" "work/$ID/images/v_%06d.jpg"
          fi

          # Aggiorna stato al 10%
          python - <<'PY'
          import json, os
          id = os.environ.get("ID")
          p = f"items/{id}/status.json"
          open(p, "w").write(json.dumps({"phase":"prepare","percent":10,"msg":"Preparo immagini…"}))
          PY

          git add "items/$ID/status.json"
          git commit -m "[skip ci] status $ID 10%" || true
          git push || true

          # Richiede almeno 20 immagini
          COUNT=$(ls "work/$ID/images/"*.jpg 2>/dev/null | wc -l | tr -d ' ')
          if [ "${COUNT:-0}" -lt 20 ]; then
            echo "ERRORE: meno di 20 immagini dopo la preparazione (COUNT=${COUNT:-0})."
            exit 1
          fi

      - name: Run ODM (65%)
        shell: bash
        run: |
          set -e
          ID=${{ steps.detect.outputs.id }}
          export ID
          # Montiamo work/$ID come /datasets/code (ODM userà /datasets come project-path e 'code' come progetto)
          docker run --rm -v "$PWD/work/$ID":/datasets/code opendronemap/odm:latest \
            --project-path /datasets \
            --fast-orthophoto \
            --texturing-nadir-weight 16 \
            --optimize-disk-space || true

          # Aggiorna stato al 65%
          python - <<'PY'
          import json, os
          id = os.environ.get("ID")
          p = f"items/{id}/status.json"
          open(p, "w").write(json.dumps({"phase":"mvs","percent":65,"msg":"Densificazione e mesh…"}))
          PY

          git add "items/$ID/status.json"
          git commit -m "[skip ci] status $ID 65%" || true
          git push || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python deps
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install trimesh pygltflib pillow

      - name: Convert OBJ to GLB (85%)
        shell: bash
        run: |
          set -e
          ID=${{ steps.detect.outputs.id }}
          export ID
          mkdir -p "items/$ID"
          python scripts/prepare_glb.py "work/$ID/code/odm_texturing/odm_textured_model.obj" "items/$ID/model.glb" || true
          cp items_template/index.html "items/$ID/index.html" || true

          # Aggiorna stato al 85%
          python - <<'PY'
          import json, os
          id = os.environ.get("ID")
          p = f"items/{id}/status.json"
          open(p, "w").write(json.dumps({"phase":"convert","percent":85,"msg":"Conversione GLB…"}))
          PY

          git add "items/$ID/status.json" "items/$ID/index.html" "items/$ID/model.glb" || true
          git commit -m "[skip ci] status $ID 85% + files" || true
          git push || true

      - name: Mark ready (100%)
        shell: bash
        run: |
          set -e
          ID=${{ steps.detect.outputs.id }}
          export ID

          if [ -f data/index.json ]; then
            python - <<'PY'
            import json, os
            id = os.environ.get("ID")
            p = "data/index.json"
            j = json.load(open(p))
            for it in j:
                if it.get("id") == id:
                    it["status"] = "ready"
            open(p, "w").write(json.dumps(j, indent=2))
            open(f"items/{id}/status.json", "w").write(json.dumps({"phase":"ready","percent":100,"msg":"Pronto"}))
            PY

            git add "data/index.json" "items/$ID/status.json"
            git commit -m "[skip ci] status $ID 100%" || true
            git push || true
